// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: branches.proto

package branches

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BusinessRegionsServiceClient is the client API for BusinessRegionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessRegionsServiceClient interface {
	GetAllBusinessRegions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (BusinessRegionsService_GetAllBusinessRegionsClient, error)
	GetPaginatedBusinessRegions(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*PaginatedBusinessRegionResponse, error)
	GetBusinessRegionByPublicId(ctx context.Context, in *PublicIdRequest, opts ...grpc.CallOption) (*BusinessRegionResponse, error)
	GetBusinessRegionBySlug(ctx context.Context, in *SlugRequest, opts ...grpc.CallOption) (*BusinessRegionResponse, error)
	SearchBusinessRegions(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (BusinessRegionsService_SearchBusinessRegionsClient, error)
	CreateBusinessRegion(ctx context.Context, in *BusinessRegionRequest, opts ...grpc.CallOption) (*BusinessRegionResponse, error)
	UpdateBusinessRegion(ctx context.Context, in *UpdateBusinessRegionRequest, opts ...grpc.CallOption) (*UpdatedBusinessRegionResponse, error)
	DeleteBusinessRegion(ctx context.Context, in *PublicIdRequest, opts ...grpc.CallOption) (*BusinessRegionResponse, error)
}

type businessRegionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessRegionsServiceClient(cc grpc.ClientConnInterface) BusinessRegionsServiceClient {
	return &businessRegionsServiceClient{cc}
}

func (c *businessRegionsServiceClient) GetAllBusinessRegions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (BusinessRegionsService_GetAllBusinessRegionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BusinessRegionsService_ServiceDesc.Streams[0], "/branches.BusinessRegionsService/GetAllBusinessRegions", opts...)
	if err != nil {
		return nil, err
	}
	x := &businessRegionsServiceGetAllBusinessRegionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BusinessRegionsService_GetAllBusinessRegionsClient interface {
	Recv() (*BusinessRegionResponse, error)
	grpc.ClientStream
}

type businessRegionsServiceGetAllBusinessRegionsClient struct {
	grpc.ClientStream
}

func (x *businessRegionsServiceGetAllBusinessRegionsClient) Recv() (*BusinessRegionResponse, error) {
	m := new(BusinessRegionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *businessRegionsServiceClient) GetPaginatedBusinessRegions(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*PaginatedBusinessRegionResponse, error) {
	out := new(PaginatedBusinessRegionResponse)
	err := c.cc.Invoke(ctx, "/branches.BusinessRegionsService/GetPaginatedBusinessRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessRegionsServiceClient) GetBusinessRegionByPublicId(ctx context.Context, in *PublicIdRequest, opts ...grpc.CallOption) (*BusinessRegionResponse, error) {
	out := new(BusinessRegionResponse)
	err := c.cc.Invoke(ctx, "/branches.BusinessRegionsService/GetBusinessRegionByPublicId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessRegionsServiceClient) GetBusinessRegionBySlug(ctx context.Context, in *SlugRequest, opts ...grpc.CallOption) (*BusinessRegionResponse, error) {
	out := new(BusinessRegionResponse)
	err := c.cc.Invoke(ctx, "/branches.BusinessRegionsService/GetBusinessRegionBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessRegionsServiceClient) SearchBusinessRegions(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (BusinessRegionsService_SearchBusinessRegionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BusinessRegionsService_ServiceDesc.Streams[1], "/branches.BusinessRegionsService/SearchBusinessRegions", opts...)
	if err != nil {
		return nil, err
	}
	x := &businessRegionsServiceSearchBusinessRegionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BusinessRegionsService_SearchBusinessRegionsClient interface {
	Recv() (*BusinessRegionResponse, error)
	grpc.ClientStream
}

type businessRegionsServiceSearchBusinessRegionsClient struct {
	grpc.ClientStream
}

func (x *businessRegionsServiceSearchBusinessRegionsClient) Recv() (*BusinessRegionResponse, error) {
	m := new(BusinessRegionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *businessRegionsServiceClient) CreateBusinessRegion(ctx context.Context, in *BusinessRegionRequest, opts ...grpc.CallOption) (*BusinessRegionResponse, error) {
	out := new(BusinessRegionResponse)
	err := c.cc.Invoke(ctx, "/branches.BusinessRegionsService/CreateBusinessRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessRegionsServiceClient) UpdateBusinessRegion(ctx context.Context, in *UpdateBusinessRegionRequest, opts ...grpc.CallOption) (*UpdatedBusinessRegionResponse, error) {
	out := new(UpdatedBusinessRegionResponse)
	err := c.cc.Invoke(ctx, "/branches.BusinessRegionsService/UpdateBusinessRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessRegionsServiceClient) DeleteBusinessRegion(ctx context.Context, in *PublicIdRequest, opts ...grpc.CallOption) (*BusinessRegionResponse, error) {
	out := new(BusinessRegionResponse)
	err := c.cc.Invoke(ctx, "/branches.BusinessRegionsService/DeleteBusinessRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessRegionsServiceServer is the server API for BusinessRegionsService service.
// All implementations must embed UnimplementedBusinessRegionsServiceServer
// for forward compatibility
type BusinessRegionsServiceServer interface {
	GetAllBusinessRegions(*emptypb.Empty, BusinessRegionsService_GetAllBusinessRegionsServer) error
	GetPaginatedBusinessRegions(context.Context, *PaginationRequest) (*PaginatedBusinessRegionResponse, error)
	GetBusinessRegionByPublicId(context.Context, *PublicIdRequest) (*BusinessRegionResponse, error)
	GetBusinessRegionBySlug(context.Context, *SlugRequest) (*BusinessRegionResponse, error)
	SearchBusinessRegions(*SearchRequest, BusinessRegionsService_SearchBusinessRegionsServer) error
	CreateBusinessRegion(context.Context, *BusinessRegionRequest) (*BusinessRegionResponse, error)
	UpdateBusinessRegion(context.Context, *UpdateBusinessRegionRequest) (*UpdatedBusinessRegionResponse, error)
	DeleteBusinessRegion(context.Context, *PublicIdRequest) (*BusinessRegionResponse, error)
	mustEmbedUnimplementedBusinessRegionsServiceServer()
}

// UnimplementedBusinessRegionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBusinessRegionsServiceServer struct {
}

func (UnimplementedBusinessRegionsServiceServer) GetAllBusinessRegions(*emptypb.Empty, BusinessRegionsService_GetAllBusinessRegionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBusinessRegions not implemented")
}
func (UnimplementedBusinessRegionsServiceServer) GetPaginatedBusinessRegions(context.Context, *PaginationRequest) (*PaginatedBusinessRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaginatedBusinessRegions not implemented")
}
func (UnimplementedBusinessRegionsServiceServer) GetBusinessRegionByPublicId(context.Context, *PublicIdRequest) (*BusinessRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessRegionByPublicId not implemented")
}
func (UnimplementedBusinessRegionsServiceServer) GetBusinessRegionBySlug(context.Context, *SlugRequest) (*BusinessRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessRegionBySlug not implemented")
}
func (UnimplementedBusinessRegionsServiceServer) SearchBusinessRegions(*SearchRequest, BusinessRegionsService_SearchBusinessRegionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchBusinessRegions not implemented")
}
func (UnimplementedBusinessRegionsServiceServer) CreateBusinessRegion(context.Context, *BusinessRegionRequest) (*BusinessRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessRegion not implemented")
}
func (UnimplementedBusinessRegionsServiceServer) UpdateBusinessRegion(context.Context, *UpdateBusinessRegionRequest) (*UpdatedBusinessRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessRegion not implemented")
}
func (UnimplementedBusinessRegionsServiceServer) DeleteBusinessRegion(context.Context, *PublicIdRequest) (*BusinessRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessRegion not implemented")
}
func (UnimplementedBusinessRegionsServiceServer) mustEmbedUnimplementedBusinessRegionsServiceServer() {
}

// UnsafeBusinessRegionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessRegionsServiceServer will
// result in compilation errors.
type UnsafeBusinessRegionsServiceServer interface {
	mustEmbedUnimplementedBusinessRegionsServiceServer()
}

func RegisterBusinessRegionsServiceServer(s grpc.ServiceRegistrar, srv BusinessRegionsServiceServer) {
	s.RegisterService(&BusinessRegionsService_ServiceDesc, srv)
}

func _BusinessRegionsService_GetAllBusinessRegions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BusinessRegionsServiceServer).GetAllBusinessRegions(m, &businessRegionsServiceGetAllBusinessRegionsServer{stream})
}

type BusinessRegionsService_GetAllBusinessRegionsServer interface {
	Send(*BusinessRegionResponse) error
	grpc.ServerStream
}

type businessRegionsServiceGetAllBusinessRegionsServer struct {
	grpc.ServerStream
}

func (x *businessRegionsServiceGetAllBusinessRegionsServer) Send(m *BusinessRegionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BusinessRegionsService_GetPaginatedBusinessRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRegionsServiceServer).GetPaginatedBusinessRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branches.BusinessRegionsService/GetPaginatedBusinessRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRegionsServiceServer).GetPaginatedBusinessRegions(ctx, req.(*PaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessRegionsService_GetBusinessRegionByPublicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRegionsServiceServer).GetBusinessRegionByPublicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branches.BusinessRegionsService/GetBusinessRegionByPublicId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRegionsServiceServer).GetBusinessRegionByPublicId(ctx, req.(*PublicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessRegionsService_GetBusinessRegionBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRegionsServiceServer).GetBusinessRegionBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branches.BusinessRegionsService/GetBusinessRegionBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRegionsServiceServer).GetBusinessRegionBySlug(ctx, req.(*SlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessRegionsService_SearchBusinessRegions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BusinessRegionsServiceServer).SearchBusinessRegions(m, &businessRegionsServiceSearchBusinessRegionsServer{stream})
}

type BusinessRegionsService_SearchBusinessRegionsServer interface {
	Send(*BusinessRegionResponse) error
	grpc.ServerStream
}

type businessRegionsServiceSearchBusinessRegionsServer struct {
	grpc.ServerStream
}

func (x *businessRegionsServiceSearchBusinessRegionsServer) Send(m *BusinessRegionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BusinessRegionsService_CreateBusinessRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRegionsServiceServer).CreateBusinessRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branches.BusinessRegionsService/CreateBusinessRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRegionsServiceServer).CreateBusinessRegion(ctx, req.(*BusinessRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessRegionsService_UpdateBusinessRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRegionsServiceServer).UpdateBusinessRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branches.BusinessRegionsService/UpdateBusinessRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRegionsServiceServer).UpdateBusinessRegion(ctx, req.(*UpdateBusinessRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessRegionsService_DeleteBusinessRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRegionsServiceServer).DeleteBusinessRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branches.BusinessRegionsService/DeleteBusinessRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRegionsServiceServer).DeleteBusinessRegion(ctx, req.(*PublicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BusinessRegionsService_ServiceDesc is the grpc.ServiceDesc for BusinessRegionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusinessRegionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "branches.BusinessRegionsService",
	HandlerType: (*BusinessRegionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPaginatedBusinessRegions",
			Handler:    _BusinessRegionsService_GetPaginatedBusinessRegions_Handler,
		},
		{
			MethodName: "GetBusinessRegionByPublicId",
			Handler:    _BusinessRegionsService_GetBusinessRegionByPublicId_Handler,
		},
		{
			MethodName: "GetBusinessRegionBySlug",
			Handler:    _BusinessRegionsService_GetBusinessRegionBySlug_Handler,
		},
		{
			MethodName: "CreateBusinessRegion",
			Handler:    _BusinessRegionsService_CreateBusinessRegion_Handler,
		},
		{
			MethodName: "UpdateBusinessRegion",
			Handler:    _BusinessRegionsService_UpdateBusinessRegion_Handler,
		},
		{
			MethodName: "DeleteBusinessRegion",
			Handler:    _BusinessRegionsService_DeleteBusinessRegion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllBusinessRegions",
			Handler:       _BusinessRegionsService_GetAllBusinessRegions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchBusinessRegions",
			Handler:       _BusinessRegionsService_SearchBusinessRegions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "branches.proto",
}

// SchoolBranchesServiceClient is the client API for SchoolBranchesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchoolBranchesServiceClient interface {
	GetAllSchoolBranches(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (SchoolBranchesService_GetAllSchoolBranchesClient, error)
	GetPaginatedSchoolBranches(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*PaginatedSchoolBranchResponse, error)
	GetSchoolBranchesByBusinessRegionPublicId(ctx context.Context, in *PublicIdRequest, opts ...grpc.CallOption) (SchoolBranchesService_GetSchoolBranchesByBusinessRegionPublicIdClient, error)
	GetSchoolBranchesByBusinessRegionSlug(ctx context.Context, in *SlugRequest, opts ...grpc.CallOption) (SchoolBranchesService_GetSchoolBranchesByBusinessRegionSlugClient, error)
	GetPaginatedSchoolBranchesByBusinessRegionPublicId(ctx context.Context, in *PaginatedSchoolBranchesByBusinessRegionPublicIdRequest, opts ...grpc.CallOption) (*PaginatedSchoolBranchResponse, error)
	GetPaginatedSchoolBranchesByBusinessRegionSlug(ctx context.Context, in *PaginatedSchoolBranchesByBusinessRegionSlugRequest, opts ...grpc.CallOption) (*PaginatedSchoolBranchResponse, error)
	GetSchoolBranchByPublicId(ctx context.Context, in *PublicIdRequest, opts ...grpc.CallOption) (*SchoolBranchResponse, error)
	GetSchoolBranchBySlug(ctx context.Context, in *SlugRequest, opts ...grpc.CallOption) (*SchoolBranchResponse, error)
	SearchSchoolBranches(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (SchoolBranchesService_SearchSchoolBranchesClient, error)
	CreateSchoolBranch(ctx context.Context, in *SchoolBranchRequest, opts ...grpc.CallOption) (*SchoolBranchResponse, error)
	UpdateSchoolBranch(ctx context.Context, in *UpdateSchoolBranchRequest, opts ...grpc.CallOption) (*UpdatedSchoolBranchResponse, error)
	DeleteSchoolBranch(ctx context.Context, in *PublicIdRequest, opts ...grpc.CallOption) (*SchoolBranchResponse, error)
}

type schoolBranchesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchoolBranchesServiceClient(cc grpc.ClientConnInterface) SchoolBranchesServiceClient {
	return &schoolBranchesServiceClient{cc}
}

func (c *schoolBranchesServiceClient) GetAllSchoolBranches(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (SchoolBranchesService_GetAllSchoolBranchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &SchoolBranchesService_ServiceDesc.Streams[0], "/branches.SchoolBranchesService/GetAllSchoolBranches", opts...)
	if err != nil {
		return nil, err
	}
	x := &schoolBranchesServiceGetAllSchoolBranchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SchoolBranchesService_GetAllSchoolBranchesClient interface {
	Recv() (*SchoolBranchResponse, error)
	grpc.ClientStream
}

type schoolBranchesServiceGetAllSchoolBranchesClient struct {
	grpc.ClientStream
}

func (x *schoolBranchesServiceGetAllSchoolBranchesClient) Recv() (*SchoolBranchResponse, error) {
	m := new(SchoolBranchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schoolBranchesServiceClient) GetPaginatedSchoolBranches(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*PaginatedSchoolBranchResponse, error) {
	out := new(PaginatedSchoolBranchResponse)
	err := c.cc.Invoke(ctx, "/branches.SchoolBranchesService/GetPaginatedSchoolBranches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolBranchesServiceClient) GetSchoolBranchesByBusinessRegionPublicId(ctx context.Context, in *PublicIdRequest, opts ...grpc.CallOption) (SchoolBranchesService_GetSchoolBranchesByBusinessRegionPublicIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &SchoolBranchesService_ServiceDesc.Streams[1], "/branches.SchoolBranchesService/GetSchoolBranchesByBusinessRegionPublicId", opts...)
	if err != nil {
		return nil, err
	}
	x := &schoolBranchesServiceGetSchoolBranchesByBusinessRegionPublicIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SchoolBranchesService_GetSchoolBranchesByBusinessRegionPublicIdClient interface {
	Recv() (*SchoolBranchResponse, error)
	grpc.ClientStream
}

type schoolBranchesServiceGetSchoolBranchesByBusinessRegionPublicIdClient struct {
	grpc.ClientStream
}

func (x *schoolBranchesServiceGetSchoolBranchesByBusinessRegionPublicIdClient) Recv() (*SchoolBranchResponse, error) {
	m := new(SchoolBranchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schoolBranchesServiceClient) GetSchoolBranchesByBusinessRegionSlug(ctx context.Context, in *SlugRequest, opts ...grpc.CallOption) (SchoolBranchesService_GetSchoolBranchesByBusinessRegionSlugClient, error) {
	stream, err := c.cc.NewStream(ctx, &SchoolBranchesService_ServiceDesc.Streams[2], "/branches.SchoolBranchesService/GetSchoolBranchesByBusinessRegionSlug", opts...)
	if err != nil {
		return nil, err
	}
	x := &schoolBranchesServiceGetSchoolBranchesByBusinessRegionSlugClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SchoolBranchesService_GetSchoolBranchesByBusinessRegionSlugClient interface {
	Recv() (*SchoolBranchResponse, error)
	grpc.ClientStream
}

type schoolBranchesServiceGetSchoolBranchesByBusinessRegionSlugClient struct {
	grpc.ClientStream
}

func (x *schoolBranchesServiceGetSchoolBranchesByBusinessRegionSlugClient) Recv() (*SchoolBranchResponse, error) {
	m := new(SchoolBranchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schoolBranchesServiceClient) GetPaginatedSchoolBranchesByBusinessRegionPublicId(ctx context.Context, in *PaginatedSchoolBranchesByBusinessRegionPublicIdRequest, opts ...grpc.CallOption) (*PaginatedSchoolBranchResponse, error) {
	out := new(PaginatedSchoolBranchResponse)
	err := c.cc.Invoke(ctx, "/branches.SchoolBranchesService/GetPaginatedSchoolBranchesByBusinessRegionPublicId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolBranchesServiceClient) GetPaginatedSchoolBranchesByBusinessRegionSlug(ctx context.Context, in *PaginatedSchoolBranchesByBusinessRegionSlugRequest, opts ...grpc.CallOption) (*PaginatedSchoolBranchResponse, error) {
	out := new(PaginatedSchoolBranchResponse)
	err := c.cc.Invoke(ctx, "/branches.SchoolBranchesService/GetPaginatedSchoolBranchesByBusinessRegionSlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolBranchesServiceClient) GetSchoolBranchByPublicId(ctx context.Context, in *PublicIdRequest, opts ...grpc.CallOption) (*SchoolBranchResponse, error) {
	out := new(SchoolBranchResponse)
	err := c.cc.Invoke(ctx, "/branches.SchoolBranchesService/GetSchoolBranchByPublicId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolBranchesServiceClient) GetSchoolBranchBySlug(ctx context.Context, in *SlugRequest, opts ...grpc.CallOption) (*SchoolBranchResponse, error) {
	out := new(SchoolBranchResponse)
	err := c.cc.Invoke(ctx, "/branches.SchoolBranchesService/GetSchoolBranchBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolBranchesServiceClient) SearchSchoolBranches(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (SchoolBranchesService_SearchSchoolBranchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &SchoolBranchesService_ServiceDesc.Streams[3], "/branches.SchoolBranchesService/SearchSchoolBranches", opts...)
	if err != nil {
		return nil, err
	}
	x := &schoolBranchesServiceSearchSchoolBranchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SchoolBranchesService_SearchSchoolBranchesClient interface {
	Recv() (*SchoolBranchResponse, error)
	grpc.ClientStream
}

type schoolBranchesServiceSearchSchoolBranchesClient struct {
	grpc.ClientStream
}

func (x *schoolBranchesServiceSearchSchoolBranchesClient) Recv() (*SchoolBranchResponse, error) {
	m := new(SchoolBranchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schoolBranchesServiceClient) CreateSchoolBranch(ctx context.Context, in *SchoolBranchRequest, opts ...grpc.CallOption) (*SchoolBranchResponse, error) {
	out := new(SchoolBranchResponse)
	err := c.cc.Invoke(ctx, "/branches.SchoolBranchesService/CreateSchoolBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolBranchesServiceClient) UpdateSchoolBranch(ctx context.Context, in *UpdateSchoolBranchRequest, opts ...grpc.CallOption) (*UpdatedSchoolBranchResponse, error) {
	out := new(UpdatedSchoolBranchResponse)
	err := c.cc.Invoke(ctx, "/branches.SchoolBranchesService/UpdateSchoolBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolBranchesServiceClient) DeleteSchoolBranch(ctx context.Context, in *PublicIdRequest, opts ...grpc.CallOption) (*SchoolBranchResponse, error) {
	out := new(SchoolBranchResponse)
	err := c.cc.Invoke(ctx, "/branches.SchoolBranchesService/DeleteSchoolBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchoolBranchesServiceServer is the server API for SchoolBranchesService service.
// All implementations must embed UnimplementedSchoolBranchesServiceServer
// for forward compatibility
type SchoolBranchesServiceServer interface {
	GetAllSchoolBranches(*emptypb.Empty, SchoolBranchesService_GetAllSchoolBranchesServer) error
	GetPaginatedSchoolBranches(context.Context, *PaginationRequest) (*PaginatedSchoolBranchResponse, error)
	GetSchoolBranchesByBusinessRegionPublicId(*PublicIdRequest, SchoolBranchesService_GetSchoolBranchesByBusinessRegionPublicIdServer) error
	GetSchoolBranchesByBusinessRegionSlug(*SlugRequest, SchoolBranchesService_GetSchoolBranchesByBusinessRegionSlugServer) error
	GetPaginatedSchoolBranchesByBusinessRegionPublicId(context.Context, *PaginatedSchoolBranchesByBusinessRegionPublicIdRequest) (*PaginatedSchoolBranchResponse, error)
	GetPaginatedSchoolBranchesByBusinessRegionSlug(context.Context, *PaginatedSchoolBranchesByBusinessRegionSlugRequest) (*PaginatedSchoolBranchResponse, error)
	GetSchoolBranchByPublicId(context.Context, *PublicIdRequest) (*SchoolBranchResponse, error)
	GetSchoolBranchBySlug(context.Context, *SlugRequest) (*SchoolBranchResponse, error)
	SearchSchoolBranches(*SearchRequest, SchoolBranchesService_SearchSchoolBranchesServer) error
	CreateSchoolBranch(context.Context, *SchoolBranchRequest) (*SchoolBranchResponse, error)
	UpdateSchoolBranch(context.Context, *UpdateSchoolBranchRequest) (*UpdatedSchoolBranchResponse, error)
	DeleteSchoolBranch(context.Context, *PublicIdRequest) (*SchoolBranchResponse, error)
	mustEmbedUnimplementedSchoolBranchesServiceServer()
}

// UnimplementedSchoolBranchesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchoolBranchesServiceServer struct {
}

func (UnimplementedSchoolBranchesServiceServer) GetAllSchoolBranches(*emptypb.Empty, SchoolBranchesService_GetAllSchoolBranchesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllSchoolBranches not implemented")
}
func (UnimplementedSchoolBranchesServiceServer) GetPaginatedSchoolBranches(context.Context, *PaginationRequest) (*PaginatedSchoolBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaginatedSchoolBranches not implemented")
}
func (UnimplementedSchoolBranchesServiceServer) GetSchoolBranchesByBusinessRegionPublicId(*PublicIdRequest, SchoolBranchesService_GetSchoolBranchesByBusinessRegionPublicIdServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSchoolBranchesByBusinessRegionPublicId not implemented")
}
func (UnimplementedSchoolBranchesServiceServer) GetSchoolBranchesByBusinessRegionSlug(*SlugRequest, SchoolBranchesService_GetSchoolBranchesByBusinessRegionSlugServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSchoolBranchesByBusinessRegionSlug not implemented")
}
func (UnimplementedSchoolBranchesServiceServer) GetPaginatedSchoolBranchesByBusinessRegionPublicId(context.Context, *PaginatedSchoolBranchesByBusinessRegionPublicIdRequest) (*PaginatedSchoolBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaginatedSchoolBranchesByBusinessRegionPublicId not implemented")
}
func (UnimplementedSchoolBranchesServiceServer) GetPaginatedSchoolBranchesByBusinessRegionSlug(context.Context, *PaginatedSchoolBranchesByBusinessRegionSlugRequest) (*PaginatedSchoolBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaginatedSchoolBranchesByBusinessRegionSlug not implemented")
}
func (UnimplementedSchoolBranchesServiceServer) GetSchoolBranchByPublicId(context.Context, *PublicIdRequest) (*SchoolBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchoolBranchByPublicId not implemented")
}
func (UnimplementedSchoolBranchesServiceServer) GetSchoolBranchBySlug(context.Context, *SlugRequest) (*SchoolBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchoolBranchBySlug not implemented")
}
func (UnimplementedSchoolBranchesServiceServer) SearchSchoolBranches(*SearchRequest, SchoolBranchesService_SearchSchoolBranchesServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchSchoolBranches not implemented")
}
func (UnimplementedSchoolBranchesServiceServer) CreateSchoolBranch(context.Context, *SchoolBranchRequest) (*SchoolBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchoolBranch not implemented")
}
func (UnimplementedSchoolBranchesServiceServer) UpdateSchoolBranch(context.Context, *UpdateSchoolBranchRequest) (*UpdatedSchoolBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchoolBranch not implemented")
}
func (UnimplementedSchoolBranchesServiceServer) DeleteSchoolBranch(context.Context, *PublicIdRequest) (*SchoolBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchoolBranch not implemented")
}
func (UnimplementedSchoolBranchesServiceServer) mustEmbedUnimplementedSchoolBranchesServiceServer() {}

// UnsafeSchoolBranchesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchoolBranchesServiceServer will
// result in compilation errors.
type UnsafeSchoolBranchesServiceServer interface {
	mustEmbedUnimplementedSchoolBranchesServiceServer()
}

func RegisterSchoolBranchesServiceServer(s grpc.ServiceRegistrar, srv SchoolBranchesServiceServer) {
	s.RegisterService(&SchoolBranchesService_ServiceDesc, srv)
}

func _SchoolBranchesService_GetAllSchoolBranches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchoolBranchesServiceServer).GetAllSchoolBranches(m, &schoolBranchesServiceGetAllSchoolBranchesServer{stream})
}

type SchoolBranchesService_GetAllSchoolBranchesServer interface {
	Send(*SchoolBranchResponse) error
	grpc.ServerStream
}

type schoolBranchesServiceGetAllSchoolBranchesServer struct {
	grpc.ServerStream
}

func (x *schoolBranchesServiceGetAllSchoolBranchesServer) Send(m *SchoolBranchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SchoolBranchesService_GetPaginatedSchoolBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolBranchesServiceServer).GetPaginatedSchoolBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branches.SchoolBranchesService/GetPaginatedSchoolBranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolBranchesServiceServer).GetPaginatedSchoolBranches(ctx, req.(*PaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolBranchesService_GetSchoolBranchesByBusinessRegionPublicId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PublicIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchoolBranchesServiceServer).GetSchoolBranchesByBusinessRegionPublicId(m, &schoolBranchesServiceGetSchoolBranchesByBusinessRegionPublicIdServer{stream})
}

type SchoolBranchesService_GetSchoolBranchesByBusinessRegionPublicIdServer interface {
	Send(*SchoolBranchResponse) error
	grpc.ServerStream
}

type schoolBranchesServiceGetSchoolBranchesByBusinessRegionPublicIdServer struct {
	grpc.ServerStream
}

func (x *schoolBranchesServiceGetSchoolBranchesByBusinessRegionPublicIdServer) Send(m *SchoolBranchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SchoolBranchesService_GetSchoolBranchesByBusinessRegionSlug_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SlugRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchoolBranchesServiceServer).GetSchoolBranchesByBusinessRegionSlug(m, &schoolBranchesServiceGetSchoolBranchesByBusinessRegionSlugServer{stream})
}

type SchoolBranchesService_GetSchoolBranchesByBusinessRegionSlugServer interface {
	Send(*SchoolBranchResponse) error
	grpc.ServerStream
}

type schoolBranchesServiceGetSchoolBranchesByBusinessRegionSlugServer struct {
	grpc.ServerStream
}

func (x *schoolBranchesServiceGetSchoolBranchesByBusinessRegionSlugServer) Send(m *SchoolBranchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SchoolBranchesService_GetPaginatedSchoolBranchesByBusinessRegionPublicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginatedSchoolBranchesByBusinessRegionPublicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolBranchesServiceServer).GetPaginatedSchoolBranchesByBusinessRegionPublicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branches.SchoolBranchesService/GetPaginatedSchoolBranchesByBusinessRegionPublicId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolBranchesServiceServer).GetPaginatedSchoolBranchesByBusinessRegionPublicId(ctx, req.(*PaginatedSchoolBranchesByBusinessRegionPublicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolBranchesService_GetPaginatedSchoolBranchesByBusinessRegionSlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginatedSchoolBranchesByBusinessRegionSlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolBranchesServiceServer).GetPaginatedSchoolBranchesByBusinessRegionSlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branches.SchoolBranchesService/GetPaginatedSchoolBranchesByBusinessRegionSlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolBranchesServiceServer).GetPaginatedSchoolBranchesByBusinessRegionSlug(ctx, req.(*PaginatedSchoolBranchesByBusinessRegionSlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolBranchesService_GetSchoolBranchByPublicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolBranchesServiceServer).GetSchoolBranchByPublicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branches.SchoolBranchesService/GetSchoolBranchByPublicId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolBranchesServiceServer).GetSchoolBranchByPublicId(ctx, req.(*PublicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolBranchesService_GetSchoolBranchBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolBranchesServiceServer).GetSchoolBranchBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branches.SchoolBranchesService/GetSchoolBranchBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolBranchesServiceServer).GetSchoolBranchBySlug(ctx, req.(*SlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolBranchesService_SearchSchoolBranches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchoolBranchesServiceServer).SearchSchoolBranches(m, &schoolBranchesServiceSearchSchoolBranchesServer{stream})
}

type SchoolBranchesService_SearchSchoolBranchesServer interface {
	Send(*SchoolBranchResponse) error
	grpc.ServerStream
}

type schoolBranchesServiceSearchSchoolBranchesServer struct {
	grpc.ServerStream
}

func (x *schoolBranchesServiceSearchSchoolBranchesServer) Send(m *SchoolBranchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SchoolBranchesService_CreateSchoolBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchoolBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolBranchesServiceServer).CreateSchoolBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branches.SchoolBranchesService/CreateSchoolBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolBranchesServiceServer).CreateSchoolBranch(ctx, req.(*SchoolBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolBranchesService_UpdateSchoolBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchoolBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolBranchesServiceServer).UpdateSchoolBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branches.SchoolBranchesService/UpdateSchoolBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolBranchesServiceServer).UpdateSchoolBranch(ctx, req.(*UpdateSchoolBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolBranchesService_DeleteSchoolBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolBranchesServiceServer).DeleteSchoolBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branches.SchoolBranchesService/DeleteSchoolBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolBranchesServiceServer).DeleteSchoolBranch(ctx, req.(*PublicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchoolBranchesService_ServiceDesc is the grpc.ServiceDesc for SchoolBranchesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchoolBranchesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "branches.SchoolBranchesService",
	HandlerType: (*SchoolBranchesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPaginatedSchoolBranches",
			Handler:    _SchoolBranchesService_GetPaginatedSchoolBranches_Handler,
		},
		{
			MethodName: "GetPaginatedSchoolBranchesByBusinessRegionPublicId",
			Handler:    _SchoolBranchesService_GetPaginatedSchoolBranchesByBusinessRegionPublicId_Handler,
		},
		{
			MethodName: "GetPaginatedSchoolBranchesByBusinessRegionSlug",
			Handler:    _SchoolBranchesService_GetPaginatedSchoolBranchesByBusinessRegionSlug_Handler,
		},
		{
			MethodName: "GetSchoolBranchByPublicId",
			Handler:    _SchoolBranchesService_GetSchoolBranchByPublicId_Handler,
		},
		{
			MethodName: "GetSchoolBranchBySlug",
			Handler:    _SchoolBranchesService_GetSchoolBranchBySlug_Handler,
		},
		{
			MethodName: "CreateSchoolBranch",
			Handler:    _SchoolBranchesService_CreateSchoolBranch_Handler,
		},
		{
			MethodName: "UpdateSchoolBranch",
			Handler:    _SchoolBranchesService_UpdateSchoolBranch_Handler,
		},
		{
			MethodName: "DeleteSchoolBranch",
			Handler:    _SchoolBranchesService_DeleteSchoolBranch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllSchoolBranches",
			Handler:       _SchoolBranchesService_GetAllSchoolBranches_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSchoolBranchesByBusinessRegionPublicId",
			Handler:       _SchoolBranchesService_GetSchoolBranchesByBusinessRegionPublicId_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSchoolBranchesByBusinessRegionSlug",
			Handler:       _SchoolBranchesService_GetSchoolBranchesByBusinessRegionSlug_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchSchoolBranches",
			Handler:       _SchoolBranchesService_SearchSchoolBranches_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "branches.proto",
}
