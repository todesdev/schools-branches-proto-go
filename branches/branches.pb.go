// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: branches.proto

package branches

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PublicIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicId string `protobuf:"bytes,1,opt,name=public_id,json=publicId,proto3" json:"public_id,omitempty"`
}

func (x *PublicIdRequest) Reset() {
	*x = PublicIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branches_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicIdRequest) ProtoMessage() {}

func (x *PublicIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branches_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicIdRequest.ProtoReflect.Descriptor instead.
func (*PublicIdRequest) Descriptor() ([]byte, []int) {
	return file_branches_proto_rawDescGZIP(), []int{0}
}

func (x *PublicIdRequest) GetPublicId() string {
	if x != nil {
		return x.PublicId
	}
	return ""
}

type SlugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *SlugRequest) Reset() {
	*x = SlugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branches_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlugRequest) ProtoMessage() {}

func (x *SlugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branches_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlugRequest.ProtoReflect.Descriptor instead.
func (*SlugRequest) Descriptor() ([]byte, []int) {
	return file_branches_proto_rawDescGZIP(), []int{1}
}

func (x *SlugRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchTerm string `protobuf:"bytes,1,opt,name=search_term,json=searchTerm,proto3" json:"search_term,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branches_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branches_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_branches_proto_rawDescGZIP(), []int{2}
}

func (x *SearchRequest) GetSearchTerm() string {
	if x != nil {
		return x.SearchTerm
	}
	return ""
}

type PaginationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *PaginationRequest) Reset() {
	*x = PaginationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branches_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationRequest) ProtoMessage() {}

func (x *PaginationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branches_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationRequest.ProtoReflect.Descriptor instead.
func (*PaginationRequest) Descriptor() ([]byte, []int) {
	return file_branches_proto_rawDescGZIP(), []int{3}
}

func (x *PaginationRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PaginationRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type BusinessRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicId    string                 `protobuf:"bytes,1,opt,name=public_id,json=publicId,proto3" json:"public_id,omitempty"`
	Slug        string                 `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	Name        string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Created_At  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_At,json=createdAt,proto3" json:"created_At,omitempty"`
	Updated_At  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_At,json=updatedAt,proto3" json:"updated_At,omitempty"`
}

func (x *BusinessRegion) Reset() {
	*x = BusinessRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branches_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessRegion) ProtoMessage() {}

func (x *BusinessRegion) ProtoReflect() protoreflect.Message {
	mi := &file_branches_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessRegion.ProtoReflect.Descriptor instead.
func (*BusinessRegion) Descriptor() ([]byte, []int) {
	return file_branches_proto_rawDescGZIP(), []int{4}
}

func (x *BusinessRegion) GetPublicId() string {
	if x != nil {
		return x.PublicId
	}
	return ""
}

func (x *BusinessRegion) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *BusinessRegion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BusinessRegion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BusinessRegion) GetCreated_At() *timestamppb.Timestamp {
	if x != nil {
		return x.Created_At
	}
	return nil
}

func (x *BusinessRegion) GetUpdated_At() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated_At
	}
	return nil
}

type BusinessRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug        string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *BusinessRegionRequest) Reset() {
	*x = BusinessRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branches_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessRegionRequest) ProtoMessage() {}

func (x *BusinessRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branches_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessRegionRequest.ProtoReflect.Descriptor instead.
func (*BusinessRegionRequest) Descriptor() ([]byte, []int) {
	return file_branches_proto_rawDescGZIP(), []int{5}
}

func (x *BusinessRegionRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *BusinessRegionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BusinessRegionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type UpdateBusinessRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicId    string `protobuf:"bytes,1,opt,name=public_id,json=publicId,proto3" json:"public_id,omitempty"`
	Slug        string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateBusinessRegionRequest) Reset() {
	*x = UpdateBusinessRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branches_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessRegionRequest) ProtoMessage() {}

func (x *UpdateBusinessRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branches_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessRegionRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessRegionRequest) Descriptor() ([]byte, []int) {
	return file_branches_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateBusinessRegionRequest) GetPublicId() string {
	if x != nil {
		return x.PublicId
	}
	return ""
}

func (x *UpdateBusinessRegionRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *UpdateBusinessRegionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateBusinessRegionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type BusinessRegionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessRegion *BusinessRegion `protobuf:"bytes,1,opt,name=business_region,json=businessRegion,proto3" json:"business_region,omitempty"`
}

func (x *BusinessRegionResponse) Reset() {
	*x = BusinessRegionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branches_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessRegionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessRegionResponse) ProtoMessage() {}

func (x *BusinessRegionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_branches_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessRegionResponse.ProtoReflect.Descriptor instead.
func (*BusinessRegionResponse) Descriptor() ([]byte, []int) {
	return file_branches_proto_rawDescGZIP(), []int{7}
}

func (x *BusinessRegionResponse) GetBusinessRegion() *BusinessRegion {
	if x != nil {
		return x.BusinessRegion
	}
	return nil
}

type UpdatedBusinessRegionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentBusinessRegion *BusinessRegion `protobuf:"bytes,1,opt,name=current_business_region,json=currentBusinessRegion,proto3" json:"current_business_region,omitempty"`
	UpdatedBusinessRegion *BusinessRegion `protobuf:"bytes,2,opt,name=updated_business_region,json=updatedBusinessRegion,proto3" json:"updated_business_region,omitempty"`
}

func (x *UpdatedBusinessRegionResponse) Reset() {
	*x = UpdatedBusinessRegionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branches_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatedBusinessRegionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedBusinessRegionResponse) ProtoMessage() {}

func (x *UpdatedBusinessRegionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_branches_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedBusinessRegionResponse.ProtoReflect.Descriptor instead.
func (*UpdatedBusinessRegionResponse) Descriptor() ([]byte, []int) {
	return file_branches_proto_rawDescGZIP(), []int{8}
}

func (x *UpdatedBusinessRegionResponse) GetCurrentBusinessRegion() *BusinessRegion {
	if x != nil {
		return x.CurrentBusinessRegion
	}
	return nil
}

func (x *UpdatedBusinessRegionResponse) GetUpdatedBusinessRegion() *BusinessRegion {
	if x != nil {
		return x.UpdatedBusinessRegion
	}
	return nil
}

type PaginatedBusinessRegionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessRegions []*BusinessRegion `protobuf:"bytes,1,rep,name=business_regions,json=businessRegions,proto3" json:"business_regions,omitempty"`
	Total           int32             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PaginatedBusinessRegionResponse) Reset() {
	*x = PaginatedBusinessRegionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branches_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginatedBusinessRegionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginatedBusinessRegionResponse) ProtoMessage() {}

func (x *PaginatedBusinessRegionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_branches_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginatedBusinessRegionResponse.ProtoReflect.Descriptor instead.
func (*PaginatedBusinessRegionResponse) Descriptor() ([]byte, []int) {
	return file_branches_proto_rawDescGZIP(), []int{9}
}

func (x *PaginatedBusinessRegionResponse) GetBusinessRegions() []*BusinessRegion {
	if x != nil {
		return x.BusinessRegions
	}
	return nil
}

func (x *PaginatedBusinessRegionResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SchoolBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicId       string                 `protobuf:"bytes,1,opt,name=public_id,json=publicId,proto3" json:"public_id,omitempty"`
	AddressId      string                 `protobuf:"bytes,2,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	ContactId      string                 `protobuf:"bytes,3,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	Slug           string                 `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	Name           string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	FoundedIn      int32                  `protobuf:"varint,7,opt,name=founded_in,json=foundedIn,proto3" json:"founded_in,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	BusinessRegion *BusinessRegion        `protobuf:"bytes,10,opt,name=business_region,json=businessRegion,proto3" json:"business_region,omitempty"`
}

func (x *SchoolBranch) Reset() {
	*x = SchoolBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branches_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchoolBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchoolBranch) ProtoMessage() {}

func (x *SchoolBranch) ProtoReflect() protoreflect.Message {
	mi := &file_branches_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchoolBranch.ProtoReflect.Descriptor instead.
func (*SchoolBranch) Descriptor() ([]byte, []int) {
	return file_branches_proto_rawDescGZIP(), []int{10}
}

func (x *SchoolBranch) GetPublicId() string {
	if x != nil {
		return x.PublicId
	}
	return ""
}

func (x *SchoolBranch) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

func (x *SchoolBranch) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *SchoolBranch) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *SchoolBranch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SchoolBranch) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SchoolBranch) GetFoundedIn() int32 {
	if x != nil {
		return x.FoundedIn
	}
	return 0
}

func (x *SchoolBranch) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SchoolBranch) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SchoolBranch) GetBusinessRegion() *BusinessRegion {
	if x != nil {
		return x.BusinessRegion
	}
	return nil
}

type SchoolBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessRegionId string `protobuf:"bytes,1,opt,name=business_region_id,json=businessRegionId,proto3" json:"business_region_id,omitempty"`
	AddressId        string `protobuf:"bytes,2,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	ContactId        string `protobuf:"bytes,3,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	Slug             string `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	Name             string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description      string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	FoundedIn        int32  `protobuf:"varint,7,opt,name=founded_in,json=foundedIn,proto3" json:"founded_in,omitempty"`
}

func (x *SchoolBranchRequest) Reset() {
	*x = SchoolBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branches_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchoolBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchoolBranchRequest) ProtoMessage() {}

func (x *SchoolBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branches_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchoolBranchRequest.ProtoReflect.Descriptor instead.
func (*SchoolBranchRequest) Descriptor() ([]byte, []int) {
	return file_branches_proto_rawDescGZIP(), []int{11}
}

func (x *SchoolBranchRequest) GetBusinessRegionId() string {
	if x != nil {
		return x.BusinessRegionId
	}
	return ""
}

func (x *SchoolBranchRequest) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

func (x *SchoolBranchRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *SchoolBranchRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *SchoolBranchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SchoolBranchRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SchoolBranchRequest) GetFoundedIn() int32 {
	if x != nil {
		return x.FoundedIn
	}
	return 0
}

type UpdateSchoolBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicId         string `protobuf:"bytes,1,opt,name=public_id,json=publicId,proto3" json:"public_id,omitempty"`
	BusinessRegionId string `protobuf:"bytes,2,opt,name=business_region_id,json=businessRegionId,proto3" json:"business_region_id,omitempty"`
	AddressId        string `protobuf:"bytes,3,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	ContactId        string `protobuf:"bytes,4,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	Slug             string `protobuf:"bytes,5,opt,name=slug,proto3" json:"slug,omitempty"`
	Name             string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Description      string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	FoundedIn        int32  `protobuf:"varint,8,opt,name=founded_in,json=foundedIn,proto3" json:"founded_in,omitempty"`
}

func (x *UpdateSchoolBranchRequest) Reset() {
	*x = UpdateSchoolBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branches_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSchoolBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSchoolBranchRequest) ProtoMessage() {}

func (x *UpdateSchoolBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branches_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSchoolBranchRequest.ProtoReflect.Descriptor instead.
func (*UpdateSchoolBranchRequest) Descriptor() ([]byte, []int) {
	return file_branches_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateSchoolBranchRequest) GetPublicId() string {
	if x != nil {
		return x.PublicId
	}
	return ""
}

func (x *UpdateSchoolBranchRequest) GetBusinessRegionId() string {
	if x != nil {
		return x.BusinessRegionId
	}
	return ""
}

func (x *UpdateSchoolBranchRequest) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

func (x *UpdateSchoolBranchRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *UpdateSchoolBranchRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *UpdateSchoolBranchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSchoolBranchRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateSchoolBranchRequest) GetFoundedIn() int32 {
	if x != nil {
		return x.FoundedIn
	}
	return 0
}

type PaginatedSchoolBranchesByBusinessRegionPublicIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicId   *PublicIdRequest   `protobuf:"bytes,1,opt,name=public_id,json=publicId,proto3" json:"public_id,omitempty"`
	Pagination *PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PaginatedSchoolBranchesByBusinessRegionPublicIdRequest) Reset() {
	*x = PaginatedSchoolBranchesByBusinessRegionPublicIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branches_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginatedSchoolBranchesByBusinessRegionPublicIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginatedSchoolBranchesByBusinessRegionPublicIdRequest) ProtoMessage() {}

func (x *PaginatedSchoolBranchesByBusinessRegionPublicIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branches_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginatedSchoolBranchesByBusinessRegionPublicIdRequest.ProtoReflect.Descriptor instead.
func (*PaginatedSchoolBranchesByBusinessRegionPublicIdRequest) Descriptor() ([]byte, []int) {
	return file_branches_proto_rawDescGZIP(), []int{13}
}

func (x *PaginatedSchoolBranchesByBusinessRegionPublicIdRequest) GetPublicId() *PublicIdRequest {
	if x != nil {
		return x.PublicId
	}
	return nil
}

func (x *PaginatedSchoolBranchesByBusinessRegionPublicIdRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type PaginatedSchoolBranchesByBusinessRegionSlugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug       *SlugRequest       `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Pagination *PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PaginatedSchoolBranchesByBusinessRegionSlugRequest) Reset() {
	*x = PaginatedSchoolBranchesByBusinessRegionSlugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branches_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginatedSchoolBranchesByBusinessRegionSlugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginatedSchoolBranchesByBusinessRegionSlugRequest) ProtoMessage() {}

func (x *PaginatedSchoolBranchesByBusinessRegionSlugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branches_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginatedSchoolBranchesByBusinessRegionSlugRequest.ProtoReflect.Descriptor instead.
func (*PaginatedSchoolBranchesByBusinessRegionSlugRequest) Descriptor() ([]byte, []int) {
	return file_branches_proto_rawDescGZIP(), []int{14}
}

func (x *PaginatedSchoolBranchesByBusinessRegionSlugRequest) GetSlug() *SlugRequest {
	if x != nil {
		return x.Slug
	}
	return nil
}

func (x *PaginatedSchoolBranchesByBusinessRegionSlugRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SchoolBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchoolBranch *SchoolBranch `protobuf:"bytes,1,opt,name=school_branch,json=schoolBranch,proto3" json:"school_branch,omitempty"`
}

func (x *SchoolBranchResponse) Reset() {
	*x = SchoolBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branches_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchoolBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchoolBranchResponse) ProtoMessage() {}

func (x *SchoolBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_branches_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchoolBranchResponse.ProtoReflect.Descriptor instead.
func (*SchoolBranchResponse) Descriptor() ([]byte, []int) {
	return file_branches_proto_rawDescGZIP(), []int{15}
}

func (x *SchoolBranchResponse) GetSchoolBranch() *SchoolBranch {
	if x != nil {
		return x.SchoolBranch
	}
	return nil
}

type UpdatedSchoolBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentSchoolBranch *SchoolBranch `protobuf:"bytes,1,opt,name=current_school_branch,json=currentSchoolBranch,proto3" json:"current_school_branch,omitempty"`
	UpdatedSchoolBranch *SchoolBranch `protobuf:"bytes,2,opt,name=updated_school_branch,json=updatedSchoolBranch,proto3" json:"updated_school_branch,omitempty"`
}

func (x *UpdatedSchoolBranchResponse) Reset() {
	*x = UpdatedSchoolBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branches_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatedSchoolBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedSchoolBranchResponse) ProtoMessage() {}

func (x *UpdatedSchoolBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_branches_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedSchoolBranchResponse.ProtoReflect.Descriptor instead.
func (*UpdatedSchoolBranchResponse) Descriptor() ([]byte, []int) {
	return file_branches_proto_rawDescGZIP(), []int{16}
}

func (x *UpdatedSchoolBranchResponse) GetCurrentSchoolBranch() *SchoolBranch {
	if x != nil {
		return x.CurrentSchoolBranch
	}
	return nil
}

func (x *UpdatedSchoolBranchResponse) GetUpdatedSchoolBranch() *SchoolBranch {
	if x != nil {
		return x.UpdatedSchoolBranch
	}
	return nil
}

type PaginatedSchoolBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchoolBranches []*SchoolBranch `protobuf:"bytes,1,rep,name=school_branches,json=schoolBranches,proto3" json:"school_branches,omitempty"`
	Total          int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PaginatedSchoolBranchResponse) Reset() {
	*x = PaginatedSchoolBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branches_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginatedSchoolBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginatedSchoolBranchResponse) ProtoMessage() {}

func (x *PaginatedSchoolBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_branches_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginatedSchoolBranchResponse.ProtoReflect.Descriptor instead.
func (*PaginatedSchoolBranchResponse) Descriptor() ([]byte, []int) {
	return file_branches_proto_rawDescGZIP(), []int{17}
}

func (x *PaginatedSchoolBranchResponse) GetSchoolBranches() []*SchoolBranch {
	if x != nil {
		return x.SchoolBranches
	}
	return nil
}

func (x *PaginatedSchoolBranchResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_branches_proto protoreflect.FileDescriptor

var file_branches_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x0b, 0x53, 0x6c, 0x75, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x30, 0x0a, 0x0d, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x22, 0x3d, 0x0a,
	0x11, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xed, 0x01, 0x0a,
	0x0e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x61, 0x0a, 0x15,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x84, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x16, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x0f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x22, 0xc3, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x17, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x52, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x1f, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x10,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x8b, 0x03, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xea, 0x01, 0x0a, 0x13, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64,
	0x49, 0x6e, 0x22, 0x8d, 0x02, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64,
	0x49, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x36, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x42, 0x79,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x32, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x42, 0x79,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x6c,
	0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x73, 0x2e, 0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x53, 0x0a, 0x14, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0xb5, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x2e, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x13, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x4a, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x76,
	0x0a, 0x1d, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x52, 0x0e, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x82, 0x06, 0x0a, 0x16, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x55, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64,
	0x12, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x54, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x15, 0x2e, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17,
	0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5b, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xf0, 0x09, 0x0a, 0x15,
	0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x2e, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x64, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6a, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x42, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64, 0x12, 0x19, 0x2e, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x62, 0x0a, 0x25, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x42, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x53, 0x6c, 0x75, 0x67, 0x12, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e,
	0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0xa1, 0x01, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x42, 0x79,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x49, 0x64, 0x12, 0x40, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x42, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x73, 0x42, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x3c, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x42, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x58, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x42, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64, 0x12, 0x19, 0x2e, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x79, 0x53, 0x6c,
	0x75, 0x67, 0x12, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x53, 0x6c,
	0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x14, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x55, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1d, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x2e, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x2e, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x23, 0x2e,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x25,
	0x5a, 0x23, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x72, 0x75, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_branches_proto_rawDescOnce sync.Once
	file_branches_proto_rawDescData = file_branches_proto_rawDesc
)

func file_branches_proto_rawDescGZIP() []byte {
	file_branches_proto_rawDescOnce.Do(func() {
		file_branches_proto_rawDescData = protoimpl.X.CompressGZIP(file_branches_proto_rawDescData)
	})
	return file_branches_proto_rawDescData
}

var file_branches_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_branches_proto_goTypes = []interface{}{
	(*PublicIdRequest)(nil),                                        // 0: branches.PublicIdRequest
	(*SlugRequest)(nil),                                            // 1: branches.SlugRequest
	(*SearchRequest)(nil),                                          // 2: branches.SearchRequest
	(*PaginationRequest)(nil),                                      // 3: branches.PaginationRequest
	(*BusinessRegion)(nil),                                         // 4: branches.BusinessRegion
	(*BusinessRegionRequest)(nil),                                  // 5: branches.BusinessRegionRequest
	(*UpdateBusinessRegionRequest)(nil),                            // 6: branches.UpdateBusinessRegionRequest
	(*BusinessRegionResponse)(nil),                                 // 7: branches.BusinessRegionResponse
	(*UpdatedBusinessRegionResponse)(nil),                          // 8: branches.UpdatedBusinessRegionResponse
	(*PaginatedBusinessRegionResponse)(nil),                        // 9: branches.PaginatedBusinessRegionResponse
	(*SchoolBranch)(nil),                                           // 10: branches.SchoolBranch
	(*SchoolBranchRequest)(nil),                                    // 11: branches.SchoolBranchRequest
	(*UpdateSchoolBranchRequest)(nil),                              // 12: branches.UpdateSchoolBranchRequest
	(*PaginatedSchoolBranchesByBusinessRegionPublicIdRequest)(nil), // 13: branches.PaginatedSchoolBranchesByBusinessRegionPublicIdRequest
	(*PaginatedSchoolBranchesByBusinessRegionSlugRequest)(nil),     // 14: branches.PaginatedSchoolBranchesByBusinessRegionSlugRequest
	(*SchoolBranchResponse)(nil),                                   // 15: branches.SchoolBranchResponse
	(*UpdatedSchoolBranchResponse)(nil),                            // 16: branches.UpdatedSchoolBranchResponse
	(*PaginatedSchoolBranchResponse)(nil),                          // 17: branches.PaginatedSchoolBranchResponse
	(*timestamppb.Timestamp)(nil),                                  // 18: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                                          // 19: google.protobuf.Empty
}
var file_branches_proto_depIdxs = []int32{
	18, // 0: branches.BusinessRegion.created_At:type_name -> google.protobuf.Timestamp
	18, // 1: branches.BusinessRegion.updated_At:type_name -> google.protobuf.Timestamp
	4,  // 2: branches.BusinessRegionResponse.business_region:type_name -> branches.BusinessRegion
	4,  // 3: branches.UpdatedBusinessRegionResponse.current_business_region:type_name -> branches.BusinessRegion
	4,  // 4: branches.UpdatedBusinessRegionResponse.updated_business_region:type_name -> branches.BusinessRegion
	4,  // 5: branches.PaginatedBusinessRegionResponse.business_regions:type_name -> branches.BusinessRegion
	18, // 6: branches.SchoolBranch.created_at:type_name -> google.protobuf.Timestamp
	18, // 7: branches.SchoolBranch.updated_at:type_name -> google.protobuf.Timestamp
	4,  // 8: branches.SchoolBranch.business_region:type_name -> branches.BusinessRegion
	0,  // 9: branches.PaginatedSchoolBranchesByBusinessRegionPublicIdRequest.public_id:type_name -> branches.PublicIdRequest
	3,  // 10: branches.PaginatedSchoolBranchesByBusinessRegionPublicIdRequest.pagination:type_name -> branches.PaginationRequest
	1,  // 11: branches.PaginatedSchoolBranchesByBusinessRegionSlugRequest.slug:type_name -> branches.SlugRequest
	3,  // 12: branches.PaginatedSchoolBranchesByBusinessRegionSlugRequest.pagination:type_name -> branches.PaginationRequest
	10, // 13: branches.SchoolBranchResponse.school_branch:type_name -> branches.SchoolBranch
	10, // 14: branches.UpdatedSchoolBranchResponse.current_school_branch:type_name -> branches.SchoolBranch
	10, // 15: branches.UpdatedSchoolBranchResponse.updated_school_branch:type_name -> branches.SchoolBranch
	10, // 16: branches.PaginatedSchoolBranchResponse.school_branches:type_name -> branches.SchoolBranch
	19, // 17: branches.BusinessRegionsService.GetAllBusinessRegions:input_type -> google.protobuf.Empty
	3,  // 18: branches.BusinessRegionsService.GetPaginatedBusinessRegions:input_type -> branches.PaginationRequest
	0,  // 19: branches.BusinessRegionsService.GetBusinessRegionByPublicId:input_type -> branches.PublicIdRequest
	1,  // 20: branches.BusinessRegionsService.GetBusinessRegionBySlug:input_type -> branches.SlugRequest
	2,  // 21: branches.BusinessRegionsService.SearchBusinessRegions:input_type -> branches.SearchRequest
	5,  // 22: branches.BusinessRegionsService.CreateBusinessRegion:input_type -> branches.BusinessRegionRequest
	6,  // 23: branches.BusinessRegionsService.UpdateBusinessRegion:input_type -> branches.UpdateBusinessRegionRequest
	0,  // 24: branches.BusinessRegionsService.DeleteBusinessRegion:input_type -> branches.PublicIdRequest
	19, // 25: branches.SchoolBranchesService.GetAllSchoolBranches:input_type -> google.protobuf.Empty
	3,  // 26: branches.SchoolBranchesService.GetPaginatedSchoolBranches:input_type -> branches.PaginationRequest
	0,  // 27: branches.SchoolBranchesService.GetSchoolBranchesByBusinessRegionPublicId:input_type -> branches.PublicIdRequest
	1,  // 28: branches.SchoolBranchesService.GetSchoolBranchesByBusinessRegionSlug:input_type -> branches.SlugRequest
	13, // 29: branches.SchoolBranchesService.GetPaginatedSchoolBranchesByBusinessRegionPublicId:input_type -> branches.PaginatedSchoolBranchesByBusinessRegionPublicIdRequest
	14, // 30: branches.SchoolBranchesService.GetPaginatedSchoolBranchesByBusinessRegionSlug:input_type -> branches.PaginatedSchoolBranchesByBusinessRegionSlugRequest
	0,  // 31: branches.SchoolBranchesService.GetSchoolBranchByPublicId:input_type -> branches.PublicIdRequest
	1,  // 32: branches.SchoolBranchesService.GetSchoolBranchBySlug:input_type -> branches.SlugRequest
	2,  // 33: branches.SchoolBranchesService.SearchSchoolBranches:input_type -> branches.SearchRequest
	11, // 34: branches.SchoolBranchesService.CreateSchoolBranch:input_type -> branches.SchoolBranchRequest
	12, // 35: branches.SchoolBranchesService.UpdateSchoolBranch:input_type -> branches.UpdateSchoolBranchRequest
	0,  // 36: branches.SchoolBranchesService.DeleteSchoolBranch:input_type -> branches.PublicIdRequest
	7,  // 37: branches.BusinessRegionsService.GetAllBusinessRegions:output_type -> branches.BusinessRegionResponse
	9,  // 38: branches.BusinessRegionsService.GetPaginatedBusinessRegions:output_type -> branches.PaginatedBusinessRegionResponse
	7,  // 39: branches.BusinessRegionsService.GetBusinessRegionByPublicId:output_type -> branches.BusinessRegionResponse
	7,  // 40: branches.BusinessRegionsService.GetBusinessRegionBySlug:output_type -> branches.BusinessRegionResponse
	7,  // 41: branches.BusinessRegionsService.SearchBusinessRegions:output_type -> branches.BusinessRegionResponse
	7,  // 42: branches.BusinessRegionsService.CreateBusinessRegion:output_type -> branches.BusinessRegionResponse
	8,  // 43: branches.BusinessRegionsService.UpdateBusinessRegion:output_type -> branches.UpdatedBusinessRegionResponse
	7,  // 44: branches.BusinessRegionsService.DeleteBusinessRegion:output_type -> branches.BusinessRegionResponse
	15, // 45: branches.SchoolBranchesService.GetAllSchoolBranches:output_type -> branches.SchoolBranchResponse
	17, // 46: branches.SchoolBranchesService.GetPaginatedSchoolBranches:output_type -> branches.PaginatedSchoolBranchResponse
	15, // 47: branches.SchoolBranchesService.GetSchoolBranchesByBusinessRegionPublicId:output_type -> branches.SchoolBranchResponse
	15, // 48: branches.SchoolBranchesService.GetSchoolBranchesByBusinessRegionSlug:output_type -> branches.SchoolBranchResponse
	17, // 49: branches.SchoolBranchesService.GetPaginatedSchoolBranchesByBusinessRegionPublicId:output_type -> branches.PaginatedSchoolBranchResponse
	17, // 50: branches.SchoolBranchesService.GetPaginatedSchoolBranchesByBusinessRegionSlug:output_type -> branches.PaginatedSchoolBranchResponse
	15, // 51: branches.SchoolBranchesService.GetSchoolBranchByPublicId:output_type -> branches.SchoolBranchResponse
	15, // 52: branches.SchoolBranchesService.GetSchoolBranchBySlug:output_type -> branches.SchoolBranchResponse
	15, // 53: branches.SchoolBranchesService.SearchSchoolBranches:output_type -> branches.SchoolBranchResponse
	15, // 54: branches.SchoolBranchesService.CreateSchoolBranch:output_type -> branches.SchoolBranchResponse
	16, // 55: branches.SchoolBranchesService.UpdateSchoolBranch:output_type -> branches.UpdatedSchoolBranchResponse
	15, // 56: branches.SchoolBranchesService.DeleteSchoolBranch:output_type -> branches.SchoolBranchResponse
	37, // [37:57] is the sub-list for method output_type
	17, // [17:37] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_branches_proto_init() }
func file_branches_proto_init() {
	if File_branches_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_branches_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branches_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branches_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branches_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branches_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branches_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branches_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branches_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessRegionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branches_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatedBusinessRegionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branches_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginatedBusinessRegionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branches_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchoolBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branches_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchoolBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branches_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSchoolBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branches_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginatedSchoolBranchesByBusinessRegionPublicIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branches_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginatedSchoolBranchesByBusinessRegionSlugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branches_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchoolBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branches_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatedSchoolBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branches_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginatedSchoolBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_branches_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_branches_proto_goTypes,
		DependencyIndexes: file_branches_proto_depIdxs,
		MessageInfos:      file_branches_proto_msgTypes,
	}.Build()
	File_branches_proto = out.File
	file_branches_proto_rawDesc = nil
	file_branches_proto_goTypes = nil
	file_branches_proto_depIdxs = nil
}
